{"ast":null,"code":"var _jsxFileName = \"/Users/samithadilshan/Documents/Company_Projects/CodeSec_Global_Assigment/recipe-app/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/dashboard.css';\nimport RecipeDetailsModal from './RecipeDetails';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(null); // For storing the selected recipe for the modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const {\n          data\n        } = await axios.get('http://localhost:3001/api/recipes/categories');\n        setCategories(data.slice(0, 5)); // Directly slice the array since the response is an array\n      } catch (error) {\n        console.error(\"Failed to fetch categories:\", error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Fetch recipes when a category is selected\n  useEffect(() => {\n    if (selectedCategory) {\n      const fetchRecipes = async () => {\n        try {\n          const {\n            data\n          } = await axios.get(`http://localhost:3001/api/recipes/category/${selectedCategory}`);\n          setRecipes(data); // Assuming data contains an array of recipes\n        } catch (error) {\n          console.error(\"Failed to fetch recipes:\", error);\n        }\n      };\n      fetchRecipes();\n    }\n  }, [selectedCategory]);\n\n  // Handle category click\n  const handleCategoryClick = category => {\n    setSelectedCategory(category);\n  };\n\n  // Handle recipe click (opens modal)\n  const handleRecipeClick = recipe => {\n    setSelectedRecipe(recipe);\n    setIsModalOpen(true); // Open the modal when a recipe is clicked\n  };\n\n  // Close the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedRecipe(null); // Clear the selected recipe when modal closes\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboardcontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recipe Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categorybuttons\",\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedCategory === category.strCategory ? 'selected' : '',\n          onClick: () => handleCategoryClick(category.strCategory),\n          children: category.strCategory\n        }, category.idCategory, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipeGrid\",\n      children: recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recipe.strMealThumb,\n          alt: recipe.strMeal,\n          className: \"recipe-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"recipe-favorite\",\n            children: \"\\u2661\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"recipe-title\",\n          children: recipe.strMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, recipe.idMeal, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"T4MFnvKM/GiLQ3IFlNkJ9oUGDZE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","RecipeDetailsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","categories","setCategories","selectedCategory","setSelectedCategory","recipes","setRecipes","selectedRecipe","setSelectedRecipe","isModalOpen","setIsModalOpen","fetchCategories","data","get","slice","error","console","fetchRecipes","handleCategoryClick","category","handleRecipeClick","recipe","closeModal","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","strCategory","onClick","idCategory","src","strMealThumb","alt","strMeal","idMeal","_c","$RefreshReg$"],"sources":["/Users/samithadilshan/Documents/Company_Projects/CodeSec_Global_Assigment/recipe-app/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/dashboard.css';\nimport RecipeDetailsModal from './RecipeDetails';\n\nconst Dashboard = () => {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(null); // For storing the selected recipe for the modal\n  const [isModalOpen, setIsModalOpen] = useState(false); \n\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const { data } = await axios.get('http://localhost:3001/api/recipes/categories');\n        setCategories(data.slice(0, 5)); // Directly slice the array since the response is an array\n      } catch (error) {\n        console.error(\"Failed to fetch categories:\", error);\n      }\n    };\n  \n    fetchCategories();\n  }, []);\n  \n\n\n  // Fetch recipes when a category is selected\n  useEffect(() => {\n    if (selectedCategory) {\n      const fetchRecipes = async () => {\n        try {\n          const { data } = await axios.get(`http://localhost:3001/api/recipes/category/${selectedCategory}`);\n          setRecipes(data); // Assuming data contains an array of recipes\n        } catch (error) {\n          console.error(\"Failed to fetch recipes:\", error);\n        }\n      };\n\n      fetchRecipes();\n    }\n  }, [selectedCategory]);\n\n  \n    // Handle category click\n    const handleCategoryClick = (category) => {\n      setSelectedCategory(category);\n    };\n\n     // Handle recipe click (opens modal)\n  const handleRecipeClick = (recipe) => {\n    setSelectedRecipe(recipe);\n    setIsModalOpen(true); // Open the modal when a recipe is clicked\n  };\n\n  // Close the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedRecipe(null); // Clear the selected recipe when modal closes\n  };\n\n  return (\n   \n<>\n    <div className=\"dashboardcontainer\">\n      <h2>Recipe Categories</h2>\n      {/* Category Buttons */}\n      <div className=\"categorybuttons\">\n        {categories.map((category) => (\n          <button\n            key={category.idCategory}\n            className={selectedCategory === category.strCategory ? 'selected' : ''}\n            onClick={() => handleCategoryClick(category.strCategory)}\n          >\n            {category.strCategory}\n          </button>\n        ))}\n      </div>\n      </div>\n    \n        {/* Recipe Grid */}\n      <div className=\"recipeGrid\">\n        {recipes.map((recipe) => (\n          <div key={recipe.idMeal} className=\"recipe-card\">\n            <img\n              src={recipe.strMealThumb}\n              alt={recipe.strMeal}\n              className=\"recipe-image\"\n            />\n            <div className='mt-2'>\n            <span className=\"recipe-favorite\">â™¡</span>\n            </div>\n            <h3 className=\"recipe-title\">{recipe.strMeal}</h3>\n            \n          </div>\n        ))}\n      </div>\n      \n\n      </>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}