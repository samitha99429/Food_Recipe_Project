{"ast":null,"code":"var _jsxFileName = \"/Users/samithadilshan/Documents/Company_Projects/CodeSec_Global_Assigment/recipe-app/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/dashboard.css';\nimport RecipeDetailsModal from './RecipeDetails'; // Modal component\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(null); // For storing the selected recipe for the modal\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const {\n          data\n        } = await axios.get('http://localhost:3001/api/recipes/categories');\n        setCategories(data.slice(0, 5)); // Directly slice the array since the response is an array\n      } catch (error) {\n        console.error(\"Failed to fetch categories:\", error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Fetch recipes when a category is selected\n  useEffect(() => {\n    if (selectedCategory) {\n      const fetchRecipes = async () => {\n        try {\n          const {\n            data\n          } = await axios.get(`http://localhost:3001/api/recipes/category/${selectedCategory}`);\n          setRecipes(data); // Assuming data contains an array of recipes\n        } catch (error) {\n          console.error(\"Failed to fetch recipes:\", error);\n        }\n      };\n      fetchRecipes();\n    }\n  }, [selectedCategory]);\n\n  // Handle category click\n  const handleCategoryClick = category => {\n    setSelectedCategory(category);\n  };\n\n  // Handle recipe click (opens modal)\n  const handleRecipeClick = recipe => {\n    console.log(\"Recipe clicked:\", recipe); // Check if this logs\n    setSelectedRecipe(recipe);\n    setIsModalOpen(true); // Open the modal when a recipe is clicked\n    console.log(\"Modal open state:\", isModalOpen); // Check if modal state is updating\n  };\n\n  // Close the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedRecipe(null); // Clear the selected recipe when modal closes\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboardcontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recipe Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"categorybuttons\",\n        children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectedCategory === category.strCategory ? 'selected' : '',\n          onClick: () => handleCategoryClick(category.strCategory),\n          children: category.strCategory\n        }, category.idCategory, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipeGrid\",\n      children: recipes.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recipe-card\",\n        onClick: () => handleRecipeClick(recipe),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: recipe.strMealThumb,\n          alt: recipe.strMeal,\n          className: \"recipe-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"recipe-favorite\",\n            children: \"\\u2661\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"recipe-title\",\n          children: recipe.strMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, recipe.idMeal, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), selectedRecipe && /*#__PURE__*/_jsxDEV(RecipeDetailsModal, {\n      isOpen: isModalOpen,\n      onRequestClose: closeModal,\n      recipe: selectedRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"T4MFnvKM/GiLQ3IFlNkJ9oUGDZE=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","RecipeDetailsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","categories","setCategories","selectedCategory","setSelectedCategory","recipes","setRecipes","selectedRecipe","setSelectedRecipe","isModalOpen","setIsModalOpen","fetchCategories","data","get","slice","error","console","fetchRecipes","handleCategoryClick","category","handleRecipeClick","recipe","log","closeModal","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","strCategory","onClick","idCategory","src","strMealThumb","alt","strMeal","idMeal","isOpen","onRequestClose","_c","$RefreshReg$"],"sources":["/Users/samithadilshan/Documents/Company_Projects/CodeSec_Global_Assigment/recipe-app/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/dashboard.css';\nimport RecipeDetailsModal from './RecipeDetails'; // Modal component\n\n\nconst Dashboard = () => {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(null); // For storing the selected recipe for the modal\n  const [isModalOpen, setIsModalOpen] = useState(false); \n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const { data } = await axios.get('http://localhost:3001/api/recipes/categories');\n        setCategories(data.slice(0, 5)); // Directly slice the array since the response is an array\n      } catch (error) {\n        console.error(\"Failed to fetch categories:\", error);\n      }\n    };\n    fetchCategories();\n  }, []);\n  \n  // Fetch recipes when a category is selected\n  useEffect(() => {\n    if (selectedCategory) {\n      const fetchRecipes = async () => {\n        try {\n          const { data } = await axios.get(`http://localhost:3001/api/recipes/category/${selectedCategory}`);\n          setRecipes(data); // Assuming data contains an array of recipes\n        } catch (error) {\n          console.error(\"Failed to fetch recipes:\", error);\n        }\n      };\n\n      fetchRecipes();\n    }\n  }, [selectedCategory]);\n\n  // Handle category click\n  const handleCategoryClick = (category) => {\n    setSelectedCategory(category);\n  };\n\n  // Handle recipe click (opens modal)\n  const handleRecipeClick = (recipe) => {\n    console.log(\"Recipe clicked:\", recipe);  // Check if this logs\n    setSelectedRecipe(recipe);\n    setIsModalOpen(true); // Open the modal when a recipe is clicked\n    console.log(\"Modal open state:\", isModalOpen);  // Check if modal state is updating\n  };\n\n  // Close the modal\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedRecipe(null); // Clear the selected recipe when modal closes\n  };\n\n \n\n\n  return (\n    <>\n      <div className=\"dashboardcontainer\">\n        <h2>Recipe Categories</h2>\n        {/* Category Buttons */}\n        <div className=\"categorybuttons\">\n          {categories.map((category) => (\n            <button\n              key={category.idCategory}\n              className={selectedCategory === category.strCategory ? 'selected' : ''}\n              onClick={() => handleCategoryClick(category.strCategory)}\n            >\n              {category.strCategory}\n            </button>\n          ))}\n        </div>\n      </div>\n\n\n      <div className=\"recipeGrid\">\n        {recipes.map((recipe) => (\n          <div key={recipe.idMeal} className=\"recipe-card\" onClick={() => handleRecipeClick(recipe)}>\n            <img\n              src={recipe.strMealThumb}\n              alt={recipe.strMeal}\n              className=\"recipe-image\"\n            />\n            <div className='mt-2'>\n              <span className=\"recipe-favorite\">â™¡</span>\n            </div>\n            <h3 className=\"recipe-title\">{recipe.strMeal}</h3>\n          </div>\n        ))}\n      </div>\n\n      \n      {selectedRecipe && (\n        <RecipeDetailsModal\n          isOpen={isModalOpen}\n          onRequestClose={closeModal}\n          recipe={selectedRecipe}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}